// Generated by CoffeeScript 1.7.1
var CS, cscodegen, insertHelpers;

CS = require('coffee-script-redux');

cscodegen = require('cscodegen');

insertHelpers = function(node, parent, chunks) {
  var prev, update;
  if (!node.range) {
    return;
  }
  node.parent = parent;
  node.source = function() {
    return chunks.slice(node.range[0], node.range[1]).join('');
  };
  update = function(s) {
    var i, _i, _ref, _ref1;
    chunks[node.range[0]] = s;
    for (i = _i = _ref = node.range[0] + 1, _ref1 = node.range[1]; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
      chunks[i] = '';
    }
  };
  if (node.update && typeof node.update === 'object') {
    prev = node.updaterange;
    Object.keys(prev).forEach(function(key) {
      update[key] = prev[key];
    });
    node.update = update;
  } else {
    node.update = update;
  }
};

module.exports = function(src, opts, fn) {
  var ast, result, walk;
  ast = CS.parse(src, {
    raw: true,
    optimise: false
  });
  ast = ast.toBasicObject();
  result = {
    chunks: src.split(''),
    toString: function() {
      return result.chunks.join('');
    },
    inspect: function() {
      return result.toString();
    }
  };
  walk = function(node, parent) {
    insertHelpers(node, parent, result.chunks);
    Object.keys(node).forEach(function(key) {
      var child;
      if (key === 'parent') {
        return;
      }
      child = node[key];
      if (Array.isArray(child)) {
        child.forEach(function(c) {
          if (c && typeof c.type === 'string') {
            return walk(c, node);
          }
        });
      } else if (child && typeof child.type === 'string') {
        insertHelpers(child, node, result.chunks);
        walk(child, node);
      }
    });
    fn(node);
  };
  walk(ast);
  return result;
};
